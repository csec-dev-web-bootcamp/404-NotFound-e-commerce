generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.VarChar(35)
  firstName String     @db.VarChar(100)
  lastName  String     @db.VarChar(100)
  email     String     @unique
  username  String     @unique
  password  String     @db.VarChar(120)
  role      UserRole   @default(CUSTOMER)
  orders    Order[]
  ratings   Rating[]
  wishlist  Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(uuid()) @db.VarChar(35)
  name     String    @unique
  products Product[]
}

model Product {
<<<<<<< HEAD
  id            String      @id @default(uuid()) @db.VarChar(35)
  name          String      @db.VarChar(100)
  description   String?     @db.Text
  price         Float       @default(0.0)
  stockQuantity Int         @db.Integer
  categoryId    String?     @db.VarChar(35)
  createdAt     DateTime    @default(now())
  category      Category?   @relation(fields: [categoryId], references: [id])
  wishlist      Wishlist[]
  ratings       Rating[]
  orderItems    OrderItem[]
}

model Wishlist {
  id        String    @id @default(uuid()) @db.VarChar(35)
  userId    String    @db.VarChar(35)
  productId String    @db.VarChar(35)
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
}

model Rating {
  id        String  @id @default(uuid()) @db.VarChar(35)
  rating    Int     @db.Integer
  review    String? @db.Text
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.VarChar(35)
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.VarChar(35)
}

model Order {
  id            String        @id @default(uuid()) @db.VarChar(35)
  user          User          @relation(fields: [userId], references: [id])
  paymentRef    String?       @db.VarChar(255)
  totalPrice    Float
  orderItems    OrderItem[]
  paymentStatus PaymentStatus @default(PENDING)
  userId        String        @db.VarChar(35)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
} 

model OrderItem {
  id         String  @id @default(uuid()) @db.VarChar(35)
  quantity   Int     @default(1)
  totalPrice Float?  @default(0)
  product    Product @relation(fields: [productId], references: [id])
  order      Order?  @relation(fields: [orderId], references: [id])
  orderId    String? @db.VarChar(35)
  productId  String  @db.VarChar(35)

  @@map("orderItems")
}

enum PaymentStatus {
  PENDING  @map("PENDING")
  CANCELED @map("CANCELED")
  NOTPAID  @map("NOTPAID")
  PAID     @map("PAID")
}
=======
  id              String  @id @default(uuid())
  name            String
  price           Int
  discountedPrice Int
  rateReview      Float
  rateReviewers   Int
  category        String
  details         String? @db.Text
  images          Json
}

// model User {
//   id       String   @id @default(uuid())
//   name     String
//   email    String   @unique
//   password String
//   role     UserRole @default(CUSTOMER)
// }
>>>>>>> de62b5515d586f9129ec6f98c5bd4a61eb334576

enum UserRole {
  ADMIN    @map("admin")
  CUSTOMER @map("customer")
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

model User {
  id         Int        @id @default(autoincrement())
  name       String
  password   String
  email      String     @unique
  created_at DateTime   @default(now())
  Orders     Orders[]
  Ratings    Ratings[]
  Wishlist   Wishlist[]
  role       UserRole   @default(CUSTOMER)
}

model Categories {
  category_id   Int        @id @default(autoincrement())
  category_name String     @unique
  Products      Products[]
}

model Products {
  product_id     Int          @id @default(autoincrement())
  category_id    Int?
  product_name   String
  description    String?
  price          Decimal      @default(0.0)
  stock_quantity Int
  created_at     DateTime     @default(now())
  Category       Categories?  @relation(fields: [category_id], references: [category_id])
  OrderItems     OrderItems[]
  Wishlist       Wishlist[]
  Ratings        Ratings[]
}

model OrderItems {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Decimal  @default(0.0)
  Order         Orders   @relation(fields: [order_id], references: [order_id])
  Product       Products @relation(fields: [product_id], references: [product_id])
}

model Wishlist {
  wishlist_id Int      @id @default(autoincrement())
  id          Int
  product_id  Int
  added_date  DateTime @default(now())
  User        User     @relation(fields: [id], references: [id])
  Product     Products @relation(fields: [product_id], references: [product_id])
}

model Ratings {
  rating_id   Int      @id @default(autoincrement())
  id          Int
  product_id  Int
  rating      Int
  review      String?
  rating_date DateTime @default(now())
  User        User     @relation(fields: [id], references: [id])
  Product     Products @relation(fields: [product_id], references: [product_id])
}

model Admins {
  admin_id   Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  email      String   @unique
  created_at DateTime @default(now())
}

enum OrderStatus {
  Pending
  Accepted
  Rejected
}

model Orders {
  order_id     Int          @id @default(autoincrement())
  id           Int
  order_status OrderStatus  @default(Pending)
  order_date   DateTime     @default(now())
  User         User         @relation(fields: [id], references: [id])
  OrderItems   OrderItems[]
}
