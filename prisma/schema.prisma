// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.VarChar(36)
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      UserRole   @default(ADMIN)
  orders    Order[]
  ratings   Rating[]
  wishlist  Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String      @id @default(uuid()) @db.VarChar(36)
  name          String      @db.VarChar(100)
  description   String?     @db.Text
  imgUrl        String      @default("https://static.vecteezy.com/system/resources/previews/022/205/612/non_2x/shopping-cart-logo-icon-design-template-isolated-vector.jpg")
  price         Float       @default(0.0)
  stockQuantity Int         @db.Integer
  createdAt     DateTime    @default(now())
  category      String      @default("")
  wishlist      Wishlist[]
  ratings       Rating[]
  orderItems    OrderItem[]
}

model Wishlist {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @db.VarChar(36)
  productId String    @db.VarChar(36)
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
}

model Rating {
  id        String  @id @default(uuid()) @db.VarChar(36)
  rating    Int     @db.Integer
  review    String? @db.Text
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.VarChar(36)
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.VarChar(36)
}

model Order {
  id            String        @id @default(uuid()) @db.VarChar(36)
  user          User          @relation(fields: [userId], references: [id])
  paymentRef    String?       @db.VarChar(255)
  totalPrice    Float
  orderItems    OrderItem[]
  paymentStatus PaymentStatus @default(PENDING)
  userId        String        @db.VarChar(36)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid()) @db.VarChar(36)
  quantity   Int     @default(1)
  totalPrice Float?  @default(0)
  product    Product @relation(fields: [productId], references: [id])
  order      Order?  @relation(fields: [orderId], references: [id])
  orderId    String? @db.VarChar(36)
  productId  String  @db.VarChar(36)

  @@map("orderItems")
}

enum PaymentStatus {
  PENDING  @map("PENDING")
  CANCELED @map("CANCELED")
  NOTPAID  @map("NOTPAID")
  PAID     @map("PAID")
}

enum UserRole {
  ADMIN    @map("admin")
  CUSTOMER @map("customer")
}
